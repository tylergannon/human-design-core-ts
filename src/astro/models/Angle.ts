/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
    // override fun plus(other: Angle): Angle = plus(this, other)

    // override fun times(scalar: Int): Angle = times(this, scalar)
    // override fun unaryMinus(): Angle = Companion.unaryMinus(this)

    // override fun minus(other: Angle): Angle = minus(this, other)
    // override fun compareTo(other: Angle): Int = compare(this, other)

    // companion object : Comparator<Angle> {
    //     internal fun plus(first: Angle, second: Angle) =
    //         reduceAngle(first.deg + second.deg, first.min + second.min, first.sec + second.sec)

    //     internal fun times(it: Angle, scalar: Int) =
    //         reduceAngle(it.deg * scalar, it.min * scalar, it.sec * scalar)

    //     internal fun unaryMinus(it: Angle) = reduceAngle(-it.deg, -it.min, -it.sec)
    //     internal fun minus(first: Angle, second: Angle) =
    //         reduceAngle(first.deg - second.deg, first.min - second.min, first.sec - second.sec)

    //     fun of(deg: Int, min: Int, sec: Int): Angle = reduceAngle(deg, min, sec)
    //     override fun compare(first: Angle?, other: Angle?): Int = if (first != null && other != null) {
    //         compareChain(first.deg, other.deg)
    //             .thenCompare(first.min, other.min)
    //             .thenCompare(first.sec, other.sec)
    //             .result
    //     } else {
    //         throw IllegalArgumentException("Can't compare angle to null.")
    //     }
    // }

export class Angle {
    'deg': number;
    'min': number;
    'sec': number;



    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "deg",
            "baseName": "deg",
            "type": "number",
            "format": ""
        },
        {
            "name": "min",
            "baseName": "min",
            "type": "number",
            "format": ""
        },
        {
            "name": "sec",
            "baseName": "sec",
            "type": "number",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Angle.attributeTypeMap;
    }


    public constructor () {
    }

}

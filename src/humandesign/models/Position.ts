/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Position as ApiPosition } from '../../astro'
import type { HDPos, Zodiac } from './types'
import * as angle from './Angle'
import { zodiacNames } from './types'
import { angleToGate, getLine } from './Gate'
import { concat } from 'ramda'

const zodiacOpposites = concat(zodiacNames.slice(6), zodiacNames.slice(0, 6))

const zodiacOpposite = (zodiac: Zodiac) => zodiacOpposites[zodiacNames.indexOf(zodiac)]

/**
 *
 * @param position - operand
 * @returns The position opposite in the sky from the one given.
 */
export const opposite: (position: HDPos) => HDPos = ({
    zodiacLng,
    zodiac,
    line,
    lng: oldLng,
}: HDPos): HDPos => {
    const lng = angle.add(oldLng, angle.OPPOSITE)
    return {
        lng,
        zodiacLng,
        zodiac: zodiacOpposite(zodiac),
        gate: angleToGate(lng),
        line,
    }
}

/**
 * @internal
 * Get a Position object from the type returned by the Api Client
 * @param position position returned by the API client
 * @returns Human Design Position object for the equivalent data
 */
export const fromApi = ({ zodiacLng, lng, zodiac }: ApiPosition): HDPos => {
    return {
        lng,
        zodiacLng,
        zodiac: zodiac.toLowerCase() as Zodiac,
        gate: angleToGate(lng),
        line: getLine(lng),
    }
}

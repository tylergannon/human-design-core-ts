/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 */
export interface Angle {
    'deg': number;
    'min': number;
    'sec': number;
}
/**
 * 
 * @export
 * @interface Ascendant
 */
export interface Ascendant {
    /**
     * 
     * @type {Angle}
     * @memberof Ascendant
     */
    'lng': Angle;
    /**
     * 
     * @type {Zodiac}
     * @memberof Ascendant
     */
    'zodiac': Zodiac;
    /**
     * 
     * @type {Angle}
     * @memberof Ascendant
     */
    'zodiacLng': Angle;
}
 */
export interface Chart {
    'chart_date': ChartDate;
    'ascendant': Ascendant;
    'sun': Position;
    'moon': Position;
    'north_node': Position;
    'mercury': Position;
    'venus': Position;
    'mars': Position;
    'jupiter': Position;
    'saturn': Position;
    'chiron': Position;
    'uranus': Position;
    'neptune': Position;
    'pluto': Position;
}
/**
 * 
 */
export interface ChartDate {
    'date': string;
    'time': string;
    'tz': string;
    'sid': number;
}
/**
 * @public
 */
export interface CityGeoFacts {
    'id': number;
    'name': string;
    'ascii_name': string;
    'lat': number;
    'lng': number;
    'country': string;
    'iso3': string;
    'admin_name': string;
    'zone': string;
}
/**
 * 
 */
export interface HDChart {
    'design': Chart;
    'natal': Chart;
}
/**
 * 
 */
export interface HTTPValidationError {
    'detail'?: Array<ValidationError>;
}
/**
 * 
 */
export interface LocationInner {
}
/**
 * @public
 */
export interface ObjectSpeed {
    'lng': Scientific;
    'lat': Scientific;
    'distance': Scientific;
}
/**
 * 
 */
export interface Position {
    'lng': Angle;
    'lat': SignedAngle;
    'distance': Scientific;
    'speed': ObjectSpeed;
    'zodiac': Zodiac;
    'zodiacLng': Angle;
}
/**
 * @public
 */
export interface Scientific {
    'qty': number;
    'e': number;
}
/**
 * @public
 */
export interface SignedAngle {
    'sign': number;
    'deg': number;
    'min': number;
    'sec': number;
}
/**
 * 
 */
export interface ValidationError {
    'loc': Array<LocationInner>;
    'msg': string;
    'type': string;
}
/**
 * An enumeration.
 * @enum {string}
 */

export const Zodiac = {
    Aries: 'Aries',
    Taurus: 'Taurus',
    Gemini: 'Gemini',
    Cancer: 'Cancer',
    Leo: 'Leo',
    Virgo: 'Virgo',
    Libra: 'Libra',
    Scorpio: 'Scorpio',
    Sagittarius: 'Sagittarius',
    Capricorn: 'Capricorn',
    Aquarius: 'Aquarius',
    Pisces: 'Pisces'
} as const;

export type Zodiac = typeof Zodiac[keyof typeof Zodiac];



/**
 * DefaultApi - axios parameter creator
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the human design chart for the given birth coordinates.
         * @summary 
         * @param {string} tz 
         * @param {string} localDate 
         * @param {string} localTime 
         * @param {number} lat 
         * @param {number} lng 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chartGet: async (tz: string, localDate: string, localTime: string, lat: number, lng: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tz' is not null or undefined
            assertParamExists('chartGet', 'tz', tz)
            // verify required parameter 'localDate' is not null or undefined
            assertParamExists('chartGet', 'localDate', localDate)
            // verify required parameter 'localTime' is not null or undefined
            assertParamExists('chartGet', 'localTime', localTime)
            // verify required parameter 'lat' is not null or undefined
            assertParamExists('chartGet', 'lat', lat)
            // verify required parameter 'lng' is not null or undefined
            assertParamExists('chartGet', 'lng', lng)
            const localVarPath = `/chart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyCookie required

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            // authentication APIKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (tz !== undefined) {
                localVarQueryParameter['tz'] = tz;
            }

            if (localDate !== undefined) {
                localVarQueryParameter['local_date'] = (localDate as any instanceof Date) ?
                    (localDate as any).toISOString().substr(0,10) :
                    localDate;
            }

            if (localTime !== undefined) {
                localVarQueryParameter['local_time'] = localTime;
            }

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lng !== undefined) {
                localVarQueryParameter['lng'] = lng;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the full chart for the date of Saturn\'s conjunction with its own position in the natal chart for the given date of birth.
         * @summary 
         * @param {string} tz 
         * @param {string} localDate 
         * @param {string} localTime 
         * @param {number} lat 
         * @param {number} lng 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saturnReturnGet: async (tz: string, localDate: string, localTime: string, lat: number, lng: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tz' is not null or undefined
            assertParamExists('saturnReturnGet', 'tz', tz)
            // verify required parameter 'localDate' is not null or undefined
            assertParamExists('saturnReturnGet', 'localDate', localDate)
            // verify required parameter 'localTime' is not null or undefined
            assertParamExists('saturnReturnGet', 'localTime', localTime)
            // verify required parameter 'lat' is not null or undefined
            assertParamExists('saturnReturnGet', 'lat', lat)
            // verify required parameter 'lng' is not null or undefined
            assertParamExists('saturnReturnGet', 'lng', lng)
            const localVarPath = `/saturn_return`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyCookie required

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            // authentication APIKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (tz !== undefined) {
                localVarQueryParameter['tz'] = tz;
            }

            if (localDate !== undefined) {
                localVarQueryParameter['local_date'] = (localDate as any instanceof Date) ?
                    (localDate as any).toISOString().substr(0,10) :
                    localDate;
            }

            if (localTime !== undefined) {
                localVarQueryParameter['local_time'] = localTime;
            }

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lng !== undefined) {
                localVarQueryParameter['lng'] = lng;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Cities
         * @param {string} q 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCitiesCitiesGet: async (q: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('searchCitiesCitiesGet', 'q', q)
            const localVarPath = `/cities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyCookie required

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            // authentication APIKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the full chart for the date of Uranus\' opposition across its own position in the natal chart for the given date of birth.
         * @summary 
         * @param {string} tz 
         * @param {string} localDate 
         * @param {string} localTime 
         * @param {number} lat 
         * @param {number} lng 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uranusOppositionGet: async (tz: string, localDate: string, localTime: string, lat: number, lng: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tz' is not null or undefined
            assertParamExists('uranusOppositionGet', 'tz', tz)
            // verify required parameter 'localDate' is not null or undefined
            assertParamExists('uranusOppositionGet', 'localDate', localDate)
            // verify required parameter 'localTime' is not null or undefined
            assertParamExists('uranusOppositionGet', 'localTime', localTime)
            // verify required parameter 'lat' is not null or undefined
            assertParamExists('uranusOppositionGet', 'lat', lat)
            // verify required parameter 'lng' is not null or undefined
            assertParamExists('uranusOppositionGet', 'lng', lng)
            const localVarPath = `/uranus_opposition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyCookie required

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            // authentication APIKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (tz !== undefined) {
                localVarQueryParameter['tz'] = tz;
            }

            if (localDate !== undefined) {
                localVarQueryParameter['local_date'] = (localDate as any instanceof Date) ?
                    (localDate as any).toISOString().substr(0,10) :
                    localDate;
            }

            if (localTime !== undefined) {
                localVarQueryParameter['local_time'] = localTime;
            }

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lng !== undefined) {
                localVarQueryParameter['lng'] = lng;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the human design chart for the given birth coordinates.
         * @summary 
         * @param {string} tz 
         * @param {string} localDate 
         * @param {string} localTime 
         * @param {number} lat 
         * @param {number} lng 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chartGet(tz: string, localDate: string, localTime: string, lat: number, lng: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HDChart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chartGet(tz, localDate, localTime, lat, lng, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the full chart for the date of Saturn\'s conjunction with its own position in the natal chart for the given date of birth.
         * @summary 
         * @param {string} tz 
         * @param {string} localDate 
         * @param {string} localTime 
         * @param {number} lat 
         * @param {number} lng 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saturnReturnGet(tz: string, localDate: string, localTime: string, lat: number, lng: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HDChart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saturnReturnGet(tz, localDate, localTime, lat, lng, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Cities
         * @param {string} q 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCitiesCitiesGet(q: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CityGeoFacts>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCitiesCitiesGet(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the full chart for the date of Uranus\' opposition across its own position in the natal chart for the given date of birth.
         * @summary 
         * @param {string} tz 
         * @param {string} localDate 
         * @param {string} localTime 
         * @param {number} lat 
         * @param {number} lng 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uranusOppositionGet(tz: string, localDate: string, localTime: string, lat: number, lng: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HDChart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uranusOppositionGet(tz, localDate, localTime, lat, lng, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Get the human design chart for the given birth coordinates.
         * @summary 
         * @param {string} tz 
         * @param {string} localDate 
         * @param {string} localTime 
         * @param {number} lat 
         * @param {number} lng 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chartGet(tz: string, localDate: string, localTime: string, lat: number, lng: number, options?: any): AxiosPromise<HDChart> {
            return localVarFp.chartGet(tz, localDate, localTime, lat, lng, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the full chart for the date of Saturn\'s conjunction with its own position in the natal chart for the given date of birth.
         * @summary 
         * @param {string} tz 
         * @param {string} localDate 
         * @param {string} localTime 
         * @param {number} lat 
         * @param {number} lng 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saturnReturnGet(tz: string, localDate: string, localTime: string, lat: number, lng: number, options?: any): AxiosPromise<HDChart> {
            return localVarFp.saturnReturnGet(tz, localDate, localTime, lat, lng, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Cities
         * @param {string} q 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCitiesCitiesGet(q: string, options?: any): AxiosPromise<Array<CityGeoFacts>> {
            return localVarFp.searchCitiesCitiesGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the full chart for the date of Uranus\' opposition across its own position in the natal chart for the given date of birth.
         * @summary 
         * @param {string} tz 
         * @param {string} localDate 
         * @param {string} localTime 
         * @param {number} lat 
         * @param {number} lng 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uranusOppositionGet(tz: string, localDate: string, localTime: string, lat: number, lng: number, options?: any): AxiosPromise<HDChart> {
            return localVarFp.uranusOppositionGet(tz, localDate, localTime, lat, lng, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Get the human design chart for the given birth coordinates.
     * @summary 
     * @param {string} tz 
     * @param {string} localDate 
     * @param {string} localTime 
     * @param {number} lat 
     * @param {number} lng 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public chartGet(tz: string, localDate: string, localTime: string, lat: number, lng: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).chartGet(tz, localDate, localTime, lat, lng, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the full chart for the date of Saturn\'s conjunction with its own position in the natal chart for the given date of birth.
     * @summary 
     * @param {string} tz 
     * @param {string} localDate 
     * @param {string} localTime 
     * @param {number} lat 
     * @param {number} lng 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public saturnReturnGet(tz: string, localDate: string, localTime: string, lat: number, lng: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saturnReturnGet(tz, localDate, localTime, lat, lng, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Cities
     * @param {string} q 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchCitiesCitiesGet(q: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchCitiesCitiesGet(q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the full chart for the date of Uranus\' opposition across its own position in the natal chart for the given date of birth.
     * @summary 
     * @param {string} tz 
     * @param {string} localDate 
     * @param {string} localTime 
     * @param {number} lat 
     * @param {number} lng 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public uranusOppositionGet(tz: string, localDate: string, localTime: string, lat: number, lng: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uranusOppositionGet(tz, localDate, localTime, lat, lng, options).then((request) => request(this.axios, this.basePath));
    }
}


